generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum MediaFileType {
  VIDEO
  IMAGE
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  tenantId String   @unique
  name     String
  role     UserRole @default(USER)
  picture  String?

  tripLogs TripLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, email])
}

model TripLog {
  id          String   @id @default(uuid())
  country     String
  countryCode String
  city        String
  location    String
  latitude    String
  longitude   String
  visitedOn   DateTime
  duration    String
  notes       String?

  mediaFiles MediaFile[]
  tags       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  @@index([userId, location, visitedOn])
}

model MediaFile {
  id       String @id @default(uuid())
  fileId   String @unique
  fileSize String
  url      String

  mediaType MediaFileType @default(IMAGE)

  tripLog   TripLog? @relation(fields: [tripLogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tripLogId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tripLogId])
}

model ContactUs {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewLetter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
